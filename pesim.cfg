# it is possible to use hex or dec
#

################################################################
### core_type, frequency (MHz)

CORE: ARM, 200


################################################################
### bus_master, unique_priority, start_address, lock, timeout

BUS_MASTER: 3, 0x80, 0, 10

################################################################
### bus_slow_mem, start_address, end_address, wait_states    
SLOW_MEM: 0x0, 0xdfffffff, 1


################################################################
### bus_type, ratio of core frequency to bus frequency

BUS: AHB, 3


################################################################
### Memory subsystem - begin
MEMORY_SUBSYSTEM {

  ################################################################
  ### ARM926 Main Write Buffer 
  ###
  ### Latency in core cycles
  ###  
  ### on/off, latency
  ###
  MAIN WRITE BUFFER: on, 1

  ################################################################
  ### Instruction MicroTLB 
  ### The number of entries must be a power of 2
  ### Fully associative
  ###
  ### Latency in centi-cycles (core)
  ### Latency for invalidating all entries in centi-cycles
  ###  
  ### on/off, num_entries, latency, latency_inv_all
  ###
  ### IMICROTLB: off, 8, 40, 160
  IMICROTLB: off, 8, 40, 160

  ################################################################
  ### Data MicroTLB 
  ### The number of entries must be a power of 2
  ### Fully associative
  ###
  ### Latency in centi-cycles
  ### Latency for invalidating all entries in centi-cycles
  ###  
  ### on/off, num_entries, latency, latency_inv_all
  ###
  ### DMICROTLB: off, 16, 40, 160
  DMICROTLB: off, 16, 40, 160

  ################################################################
  ### TLB 
  ### The number of entries must be a power of 2
  ### The associativity must be a power of 2
  ###
  ### Latency in centi-cycles
  ### Latency for invalidating all entries in centi-cycles
  ###  
  ### on/off, num_entries, assoc, latency, latency_inv_all
  ###
  ### TLB: off, 64, 2, 60, 2560
  TLB: off, 64, 2, 60, 2560

  ################################################################
  ### ARM926 MMU
  ### Latency in centi-cycles
  ###
  ### on/off, latency
  ###
  MMU: off, 100

  ####################################################################
  ### ARM926 ICache
  ### Line size = 32B
  ###
  ### Latency in core cycles
  ### Latency for invalidating all entries in core cycles
  ###
  ### on/off, size(KB), Associativity, latency, latency_inv_all
  ###
  ICACHE: off, 32, 4, 1, 100

  ####################################################################
  ### ARM926 DCache
  ### Line size = 32B
  ### Number of dirty bits = 2
  ### 
  ### Latency in core cycles
  ### Latency for invalidating all entries in core cycles
  ### Latency for cleaning all entries in core cycles 
  ###   (without external memory latency)
  ###
  ### Has ARM926 Writeback buffer
  ###
  ### on/off, size(KB), Associativity, latency, latency_inv_all, 
  ### Latency_clean_all, wbb_on/off, wbb_latency
  ###
  DCACHE: off, 4, 1, 1, 100, 
	  100, on, 1

  ####################################################################
  ### ARM926 Instruction TCM
  ###
  ### Latency in core cycles
  ### 
  ### on/off, base address, size(KB), latency
  ITCM: off, 0x0, 32, 2

  ####################################################################
  ### ARM926 Data TCM
  ###
  ### Latency in core cycles
  ### 
  ###   on/off, Base Address, size(KB),  latency, SPMM Address
  DTCM: on,     0x04000000,   32,        1

  ####################################################################
  ### ARM926 Instruction Prefetch Buffer
  ### 
  ### Latency in core cycles
  ### 
  ### on/off, latency
  IPB: on, 1

  ####################################################################
  #### Latency in bus cycles.
  MEMORY
  {
     # NAME:  TYPE      { SO_NAME,        BASE,        SIZE(KB), CLOCK(KHZ), IRQ_NO }
      VIC:     VICPL190  { vicpl190.so,    0x10140000,  4,        64                 }
#      TIMER01: TMRSP804  { timersp804.so,  0x101E2000,  4,        32,         4      }
      DMAC:    DMACPL080 { dmacpl080.so,   0x101F2000,  4,        32,         5      }

     # NAME:  TYPE      { SO_NAME,      MEMORY_BASE, MEMORY_SIZE, CONTROLLER_BASE, CONTROLLER_SIZE, 
     #                    BANK_BIT,     ROW_BIT,     COLUMN_BIT,
     #                    NS_READ_HIT,  NS_READ_MISS,S_READ,      NS_WRITE_HIT,    NS_WRITE_MISS,   S_WRITE }
     MPMC:    MPMCGX175 { mpmcgx175.so, 0x00000000,  0x40000,     0x10110000,      64,
                          2,            13,          10, 
                          8,            11,          1,           3,               4,                1 }
							
  }
### Memory subsystem - end
}

